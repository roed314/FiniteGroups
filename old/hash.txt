We use the following algorithm to compute a 64-bit hash of a group, invariant under isomorphism.  This hash is intended to be used along with the order of the group as an identifier.

The algorithm proceeds in two stages.  The first stage produces a nested list of integers using natural isomorphism invariants and the small group id function.  The second stage (the collapse function below) converts this list of integers to a 64-bit integer.  We give Pythonic pseudocode below (with some obvious optimizations omitted).

Notation: G is a group of order n.  We use CamelCase for functions from Magma/GAP and lower-case/underscores for functions defined here or in Python.

We will need to compute this hash for all groups of order 2^9, 2^9*3, 3^7, 5^5, 5^6, 5^7, 7^5, 7^6, 7^7, 11^5, 11^6, 11^7, p^5, p^6 (p < some bound).  It will also be used to simplify isomorphism testing for groups of larger orders (since we can accumulate by hash)

Here are some ideas we considered and did not end up using because they were not worth the time cost:
 - Computing easy hashes of the derived subgroup, center, Frattini subgroup, solvable radical, Sylow subgroups or their quotients
 - Use LGWeights on a Special Pcgs (this is a GAP function assigning weights to elements of a pcgs; it is used in some of the IdGroup routines)
 - Length of a minimal generating set
 - Centralizers of Sylow subgroups in other Sylow subgroups

def can_identify(G):
    # These are the groups that GAP can identify (Magma seems to struggle with a few orders such as 1152 and 1920)
    n = Order(G)
    if n <= 2000:
        return (n % 512 != 0)
    elif n == p^a:
        return (a <= 4)
    elif IsSquarefree(n) or n == p^2 * q:
        return True
    elif IsCubefree(n) and n <= 50000:
        return True
    elif n == p^a * q:
        return any(M % p^a == 0 for M in [2^8, 3^6, 5^5, 7^4])
    return False

def conjugacy_class_data(G):
    data = {}
    for C in ConjugacyClasses(G):
        data[Order(C), Size(C)] += 1
    return sorted((o, m, data[o,m]) for o,m in data)

def easy_hash(G):
    if can_identify(G):
        return IdGroup(G)
    else:
        return collapse(conjugacy_class_data(G))

def maximal_subgroup_data(G):
    return sorted(easy_hash(H) for H in MaximalSubgroups(G))

def hash(G):
    if can_identify(G):
        return IdGroup(G)
    elif IsAbelian(G):
        return collapse(SmithInvariants(G))
    else:
        return collapse(maximal_subgroup_data(G))

def collapse(L):
    if not isinstance(L, list):
        return L
    L = [collapse(x) for x in L]
    res = 997*len(L)
    for x in L:
        res = xor(1000003*res % 2^64, x)
    # Postgres only has signed bigints
    if res >= 2^63:
        res -= 2^64
    return res
