[extent]
max_small_order = 31
max_transitive_degree = 8
skips = 16
task_limit = 10
max_gl2 = 9
[dirs]
base = ~/FiniteGroups/data
subdirs = small, transitive, logs
[logging]
logfile_template = logs/{name}_{N}.log
logfrequency = 1
[plan]
stages = Small, Collate
#stages = Collate
[StageHashAmbient]
# Generates input hashfiles for natural families: symmetric, dihedral, matrix groups, etc
[StageHashTransitive]
# Generates input hashfiles for a range of transitive groups
[StageHashGLnFq]
# Generates input hashfiles for finite matrix groups
[StageHashGLnZ]
# Generates input hashfiles for finite subgroups of GLnZ
logheader = [GLnZ:{n}]
out0 = hashed/{N}/{hash}.txt
data0 = ambient_label, elt_rep_type, generators, pc_code

[StageSubgroups]
# Given a file with a list of labels already present in the labeled/ folder (and the parameters controlling which subgroups to add), generates input hashfiles for their subgroups.
[StageFilter]
# pick one representative from each isomorphism class, providing a temporary label (that includes the hash)
# Once this process is successfully run, the files in the hashed folder should be DELETED, along with the .done files in the filtered folder so that we're ready for new data.
# Note that the hashed and filtered folders don't write a header line in the interest of saving space (since hopefully many hash files will contain only one group)
# We use a separate process for groups in the identifiable regime (e.g. <= 2000, not 512, 1024, 1536; also 3125 and others)
input_format = ambient_label, elt_rep_type, generators, pc_code
logheader = [filter:{N}:{hash}]
in0 = hashed/{N}/{hash}.txt
out0 = filtered/{N}/{hash}.txt
data0 = ambient_label, 
out1 = hashcounts/{N}.txt
[StageLabel]
# choose permanent labels
logheader = [label:{N}]
[StageSmall]
logheader = [small:{N}:{minid}]
in0 = small/gps_{N}_{minid}.txt
done = small/gps_{N}.done
out0 = small/gps_{N}_{minid}.txt
data0 = label, order, counter, factors_of_order, exponent, abelian, cyclic, solvable, supersolvable, nilpotent, metacyclic, metabelian, simple, almost_simple, quasisimple, perfect, monomial, rational, Zgroup, Agroup, pgroup, elementary, hyperelementary, rank, eulerian_function, center, center_label, central_quotient, commutator, commutator_label, abelian_quotient, commutator_count, frattini, frattini_label, frattini_quotient, fitting, radical, socle, transitive_degree, transitive_subgroup, perm_gens, aut_order, aut_group, outer_order, outer_group, factors_of_aut_order, nilpotency_class, number_conjugacy_classes, number_subgroup_classes, number_subgroups, number_normal_subgroups, number_characteristic_subgroups, derived_series, derived_length, perfect_core, chief_series, lower_central_series, upper_central_series, primary_abelian_invariants, smith_abelian_invariants, schur_multiplier, order_stats, elt_rep_type, ngens, pc_code, all_subgroups_known, normal_subgroups_known, maximal_subgroups_known, subgroup_inclusions_known, outer_equivalence
# name, tex_name, smallrep, old_label, subgroup_index_bound, moddecompuniq, is_wreath_product, is_central_product, is_finite_matrix_group, is_direct_product, is_semidirect_product, composition_factors, composition_length
out1 = small/subs_{N}_{minid}.txt
data1 = label, outer_equivalence, counter, subgroup, subgroup_order, ambient, ambient_order, quotient, quotient_order, normal, characteristic, cyclic, abelian, perfect, sylow, hall, maximal, maximal_normal, minimal, minimal_normal, split, complements, direct, central, stem, count, conjugacy_class_count, core, coset_action_label, normalizer, centralizer, normal_closure, contains, contained_in
# aut_counter, extension_counter, counter_by_index, quotient_action_kernel, quotient_action_image, quotient_fusion, subgroup_fusion, alias_spot, generators, projective_image
out2 = small/cc_{N}_{minid}.txt
data2 = label, group, size, counter, order, centralizer, powers
# representative
out3 = small/char_{N}_{minid}.txt
data3 = label, group, dim, counter, kernel, faithful
# image, center
out4 = small/cgps_{N}_{minid}.txt
data4 = label, dim, order, group, irreducible, indicator, schur_index, cyc_order_mat, cyc_order_traces, denominators, gens, traces
# decomposition, trace_field
[StageFillAuts]
# Fill in NULL aut_group and outer_group now that we have groups beyond SmallGroups
[StageSetAliases]
# Fill in name, tex_name on groups; create special names tables; add alias_spot on the various tables that have it
[StageCollate]
logheader = '[Collate]'
# data entries are required but unused
in0 = small/gps_{N}_{minid}.txt
out0 = gps_groups.txt
data0 =
in1 = small/subs_{N}_{minid}.txt
out1 = gps_subgroups.txt
data1 =
in2 = small/cc_{N}_{minid}.txt
out2 = gps_groups_cc.txt
data2 =
in3 = small/char_{N}_{minid}.txt
out3 = gps_char.txt
data3 =
in4 = small/cgps_{N}_{minid}.txt
out4 = gps_crep.txt
data4 =